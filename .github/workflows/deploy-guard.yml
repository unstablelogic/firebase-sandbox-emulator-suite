name: 🛡️ Deploy Guard

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force:
        description: 'Force deployment even if schema check fails'
        required: false
        default: 'false'
        type: boolean

jobs:
  validate-schema:
    runs-on: ubuntu-latest
    steps:
      - name: 🧩 Checkout
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔥 Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: 🔐 Authenticate Firebase
        run: |
          if [ -n "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-service-account.json
            export GOOGLE_APPLICATION_CREDENTIALS=firebase-service-account.json
          else
            firebase login:ci --token "${{ secrets.FIREBASE_TOKEN }}"
          fi

      - name: 📤 Export Schema
        run: |
          export FIREBASE_PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID }}"
          npm run schema:export

      - name: 🔍 Compare Schema
        run: |
          npm run schema:diff
        continue-on-error: true

      - name: 🚫 Block Deployment
        if: failure() && steps.schema-diff.outcome == 'failure' && github.event.inputs.force != 'true'
        run: |
          echo "❌ Schema mismatch detected!"
          echo "Local schema differs from production schema."
          echo "To force deployment, use: gh workflow run deploy-guard.yml -f force=true"
          exit 1

      - name: ✅ Schema Check Passed
        if: success()
        run: |
          echo "✅ Schema check passed!"
          echo "Deployment can proceed."

      - name: 📢 Notify Success
        if: success()
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"text":"✅ Schema check passed for deployment"}'
          fi
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"content":"✅ Schema check passed for deployment"}'
          fi

      - name: 📢 Notify Failure
        if: failure() && steps.schema-diff.outcome == 'failure'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"text":"❌ Schema check failed - deployment blocked"}'
          fi
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"content":"❌ Schema check failed - deployment blocked"}'
          fi

  deploy:
    needs: validate-schema
    runs-on: ubuntu-latest
    if: always() && (needs.validate-schema.result == 'success' || github.event.inputs.force == 'true')
    steps:
      - name: 🧩 Checkout
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: npm run build

      - name: 🚀 Deploy to Firebase Hosting
        run: |
          npm install -g firebase-tools
          if [ -n "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-service-account.json
            export GOOGLE_APPLICATION_CREDENTIALS=firebase-service-account.json
          else
            firebase login:ci --token "${{ secrets.FIREBASE_TOKEN }}"
          fi
          firebase deploy --only hosting

      - name: 📢 Notify Deployment Success
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"text":"🚀 Deployment successful!"}'
          fi
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"content":"🚀 Deployment successful!"}'
          fi

